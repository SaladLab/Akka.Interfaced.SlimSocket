// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Actor;
using Akka.Interfaced;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

#region UniversalChat.Interface.IOccupant

namespace UniversalChat.Interface
{
    [PayloadTableForInterfacedActor(typeof(IOccupant))]
    public static class IOccupant_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(GetHistory_Invoke), typeof(GetHistory_Return)},
                {typeof(Invite_Invoke), null},
                {typeof(Say_Invoke), null},
            };
        }

        [ProtoContract, TypeAlias]
        public class GetHistory_Invoke : IInterfacedPayload, ITagOverridable, IAsyncInvokable
        {
            public Type GetInterfaceType() { return typeof(IOccupant); }

            public void SetTag(object value) { }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IOccupant)target).GetHistory();
                return (IValueGetable)(new GetHistory_Return { v = (System.Collections.Generic.List<UniversalChat.Interface.ChatItem>)__v });
            }
        }

        [ProtoContract, TypeAlias]
        public class GetHistory_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Collections.Generic.List<UniversalChat.Interface.ChatItem> v;

            public Type GetInterfaceType() { return typeof(IOccupant); }

            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class Invite_Invoke : IInterfacedPayload, ITagOverridable, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String targetUserId;
            [ProtoMember(2)] public System.String senderUserId;

            public Type GetInterfaceType() { return typeof(IOccupant); }

            public void SetTag(object value) { senderUserId = (System.String)value; }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IOccupant)target).Invite(targetUserId, senderUserId);
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class Say_Invoke : IInterfacedPayload, ITagOverridable, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String msg;
            [ProtoMember(2)] public System.String senderUserId;

            public Type GetInterfaceType() { return typeof(IOccupant); }

            public void SetTag(object value) { senderUserId = (System.String)value; }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IOccupant)target).Say(msg, senderUserId);
                return null;
            }
        }
    }

    public interface IOccupant_NoReply
    {
        void GetHistory();
        void Invite(System.String targetUserId, System.String senderUserId = null);
        void Say(System.String msg, System.String senderUserId = null);
    }

    [ProtoContract, TypeAlias]
    public class OccupantRef : InterfacedActorRef, IOccupant, IOccupant_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private OccupantRef()
            : base(null)
        {
        }

        public OccupantRef(IActorRef actor)
            : base(actor)
        {
        }

        public OccupantRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IOccupant_NoReply WithNoReply()
        {
            return this;
        }

        public OccupantRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new OccupantRef(Actor, requestWaiter, Timeout);
        }

        public OccupantRef WithTimeout(TimeSpan? timeout)
        {
            return new OccupantRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Collections.Generic.List<UniversalChat.Interface.ChatItem>> GetHistory()
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IOccupant_PayloadTable.GetHistory_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<UniversalChat.Interface.ChatItem>>(requestMessage);
        }

        public Task Invite(System.String targetUserId, System.String senderUserId = null)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IOccupant_PayloadTable.Invite_Invoke { targetUserId = targetUserId, senderUserId = senderUserId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Say(System.String msg, System.String senderUserId = null)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IOccupant_PayloadTable.Say_Invoke { msg = msg, senderUserId = senderUserId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IOccupant_NoReply.GetHistory()
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IOccupant_PayloadTable.GetHistory_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IOccupant_NoReply.Invite(System.String targetUserId, System.String senderUserId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IOccupant_PayloadTable.Invite_Invoke { targetUserId = targetUserId, senderUserId = senderUserId }
            };
            SendRequest(requestMessage);
        }

        void IOccupant_NoReply.Say(System.String msg, System.String senderUserId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IOccupant_PayloadTable.Say_Invoke { msg = msg, senderUserId = senderUserId }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region UniversalChat.Interface.IRoom

namespace UniversalChat.Interface
{
    [PayloadTableForInterfacedActor(typeof(IRoom))]
    public static class IRoom_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(Enter_Invoke), typeof(Enter_Return)},
                {typeof(Exit_Invoke), null},
            };
        }

        [ProtoContract, TypeAlias]
        public class Enter_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String userId;
            [ProtoMember(2)] public UniversalChat.Interface.RoomObserver observer;

            public Type GetInterfaceType() { return typeof(IRoom); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IRoom)target).Enter(userId, observer);
                return (IValueGetable)(new Enter_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class Enter_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public UniversalChat.Interface.RoomInfo v;

            public Type GetInterfaceType() { return typeof(IRoom); }

            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class Exit_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String userId;

            public Type GetInterfaceType() { return typeof(IRoom); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IRoom)target).Exit(userId);
                return null;
            }
        }
    }

    public interface IRoom_NoReply
    {
        void Enter(System.String userId, UniversalChat.Interface.IRoomObserver observer);
        void Exit(System.String userId);
    }

    [ProtoContract, TypeAlias]
    public class RoomRef : InterfacedActorRef, IRoom, IRoom_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private RoomRef()
            : base(null)
        {
        }

        public RoomRef(IActorRef actor)
            : base(actor)
        {
        }

        public RoomRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IRoom_NoReply WithNoReply()
        {
            return this;
        }

        public RoomRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new RoomRef(Actor, requestWaiter, Timeout);
        }

        public RoomRef WithTimeout(TimeSpan? timeout)
        {
            return new RoomRef(Actor, RequestWaiter, timeout);
        }

        public Task<UniversalChat.Interface.RoomInfo> Enter(System.String userId, UniversalChat.Interface.IRoomObserver observer)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IRoom_PayloadTable.Enter_Invoke { userId = userId, observer = (UniversalChat.Interface.RoomObserver)observer }
            };
            return SendRequestAndReceive<UniversalChat.Interface.RoomInfo>(requestMessage);
        }

        public Task Exit(System.String userId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IRoom_PayloadTable.Exit_Invoke { userId = userId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IRoom_NoReply.Enter(System.String userId, UniversalChat.Interface.IRoomObserver observer)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IRoom_PayloadTable.Enter_Invoke { userId = userId, observer = (UniversalChat.Interface.RoomObserver)observer }
            };
            SendRequest(requestMessage);
        }

        void IRoom_NoReply.Exit(System.String userId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IRoom_PayloadTable.Exit_Invoke { userId = userId }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region UniversalChat.Interface.IUser

namespace UniversalChat.Interface
{
    [PayloadTableForInterfacedActor(typeof(IUser))]
    public static class IUser_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(EnterRoom_Invoke), typeof(EnterRoom_Return)},
                {typeof(ExitFromRoom_Invoke), null},
                {typeof(GetId_Invoke), typeof(GetId_Return)},
                {typeof(GetRoomList_Invoke), typeof(GetRoomList_Return)},
                {typeof(Whisper_Invoke), null},
            };
        }

        [ProtoContract, TypeAlias]
        public class EnterRoom_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String name;
            [ProtoMember(2)] public System.Int32 observerId;

            public Type GetInterfaceType() { return typeof(IUser); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IUser)target).EnterRoom(name, observerId);
                return (IValueGetable)(new EnterRoom_Return { v = (System.Tuple<System.Int32, UniversalChat.Interface.RoomInfo>)__v });
            }
        }

        [ProtoContract, TypeAlias]
        public class EnterRoom_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Tuple<System.Int32, UniversalChat.Interface.RoomInfo> v;

            public Type GetInterfaceType() { return typeof(IUser); }

            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class ExitFromRoom_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String name;

            public Type GetInterfaceType() { return typeof(IUser); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IUser)target).ExitFromRoom(name);
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class GetId_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType() { return typeof(IUser); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IUser)target).GetId();
                return (IValueGetable)(new GetId_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class GetId_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.String v;

            public Type GetInterfaceType() { return typeof(IUser); }

            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class GetRoomList_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType() { return typeof(IUser); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IUser)target).GetRoomList();
                return (IValueGetable)(new GetRoomList_Return { v = (System.Collections.Generic.List<System.String>)__v });
            }
        }

        [ProtoContract, TypeAlias]
        public class GetRoomList_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Collections.Generic.List<System.String> v;

            public Type GetInterfaceType() { return typeof(IUser); }

            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class Whisper_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String targetUserId;
            [ProtoMember(2)] public System.String message;

            public Type GetInterfaceType() { return typeof(IUser); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IUser)target).Whisper(targetUserId, message);
                return null;
            }
        }
    }

    public interface IUser_NoReply
    {
        void EnterRoom(System.String name, System.Int32 observerId);
        void ExitFromRoom(System.String name);
        void GetId();
        void GetRoomList();
        void Whisper(System.String targetUserId, System.String message);
    }

    [ProtoContract, TypeAlias]
    public class UserRef : InterfacedActorRef, IUser, IUser_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private UserRef()
            : base(null)
        {
        }

        public UserRef(IActorRef actor)
            : base(actor)
        {
        }

        public UserRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IUser_NoReply WithNoReply()
        {
            return this;
        }

        public UserRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserRef(Actor, requestWaiter, Timeout);
        }

        public UserRef WithTimeout(TimeSpan? timeout)
        {
            return new UserRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Tuple<System.Int32, UniversalChat.Interface.RoomInfo>> EnterRoom(System.String name, System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.EnterRoom_Invoke { name = name, observerId = observerId }
            };
            return SendRequestAndReceive<System.Tuple<System.Int32, UniversalChat.Interface.RoomInfo>>(requestMessage);
        }

        public Task ExitFromRoom(System.String name)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.ExitFromRoom_Invoke { name = name }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.String> GetId()
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.GetId_Invoke {  }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        public Task<System.Collections.Generic.List<System.String>> GetRoomList()
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.GetRoomList_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<System.String>>(requestMessage);
        }

        public Task Whisper(System.String targetUserId, System.String message)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.Whisper_Invoke { targetUserId = targetUserId, message = message }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IUser_NoReply.EnterRoom(System.String name, System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.EnterRoom_Invoke { name = name, observerId = observerId }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.ExitFromRoom(System.String name)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.ExitFromRoom_Invoke { name = name }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.GetId()
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.GetId_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.GetRoomList()
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.GetRoomList_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.Whisper(System.String targetUserId, System.String message)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.Whisper_Invoke { targetUserId = targetUserId, message = message }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region UniversalChat.Interface.IUserLogin

namespace UniversalChat.Interface
{
    [PayloadTableForInterfacedActor(typeof(IUserLogin))]
    public static class IUserLogin_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(Login_Invoke), typeof(Login_Return)},
            };
        }

        [ProtoContract, TypeAlias]
        public class Login_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String id;
            [ProtoMember(2)] public System.String password;
            [ProtoMember(3)] public System.Int32 observerId;

            public Type GetInterfaceType() { return typeof(IUserLogin); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IUserLogin)target).Login(id, password, observerId);
                return (IValueGetable)(new Login_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class Login_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Int32 v;

            public Type GetInterfaceType() { return typeof(IUserLogin); }

            public object Value { get { return v; } }
        }
    }

    public interface IUserLogin_NoReply
    {
        void Login(System.String id, System.String password, System.Int32 observerId);
    }

    [ProtoContract, TypeAlias]
    public class UserLoginRef : InterfacedActorRef, IUserLogin, IUserLogin_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private UserLoginRef()
            : base(null)
        {
        }

        public UserLoginRef(IActorRef actor)
            : base(actor)
        {
        }

        public UserLoginRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IUserLogin_NoReply WithNoReply()
        {
            return this;
        }

        public UserLoginRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserLoginRef(Actor, requestWaiter, Timeout);
        }

        public UserLoginRef WithTimeout(TimeSpan? timeout)
        {
            return new UserLoginRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Int32> Login(System.String id, System.String password, System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observerId = observerId }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        void IUserLogin_NoReply.Login(System.String id, System.String password, System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observerId = observerId }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region UniversalChat.Interface.IUserMessasing

namespace UniversalChat.Interface
{
    [PayloadTableForInterfacedActor(typeof(IUserMessasing))]
    public static class IUserMessasing_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(Invite_Invoke), null},
                {typeof(Whisper_Invoke), null},
            };
        }

        [ProtoContract, TypeAlias]
        public class Invite_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String invitorUserId;
            [ProtoMember(2)] public System.String roomName;

            public Type GetInterfaceType() { return typeof(IUserMessasing); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IUserMessasing)target).Invite(invitorUserId, roomName);
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class Whisper_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public UniversalChat.Interface.ChatItem chatItem;

            public Type GetInterfaceType() { return typeof(IUserMessasing); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IUserMessasing)target).Whisper(chatItem);
                return null;
            }
        }
    }

    public interface IUserMessasing_NoReply
    {
        void Invite(System.String invitorUserId, System.String roomName);
        void Whisper(UniversalChat.Interface.ChatItem chatItem);
    }

    [ProtoContract, TypeAlias]
    public class UserMessasingRef : InterfacedActorRef, IUserMessasing, IUserMessasing_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private UserMessasingRef()
            : base(null)
        {
        }

        public UserMessasingRef(IActorRef actor)
            : base(actor)
        {
        }

        public UserMessasingRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IUserMessasing_NoReply WithNoReply()
        {
            return this;
        }

        public UserMessasingRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserMessasingRef(Actor, requestWaiter, Timeout);
        }

        public UserMessasingRef WithTimeout(TimeSpan? timeout)
        {
            return new UserMessasingRef(Actor, RequestWaiter, timeout);
        }

        public Task Invite(System.String invitorUserId, System.String roomName)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserMessasing_PayloadTable.Invite_Invoke { invitorUserId = invitorUserId, roomName = roomName }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Whisper(UniversalChat.Interface.ChatItem chatItem)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserMessasing_PayloadTable.Whisper_Invoke { chatItem = chatItem }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IUserMessasing_NoReply.Invite(System.String invitorUserId, System.String roomName)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserMessasing_PayloadTable.Invite_Invoke { invitorUserId = invitorUserId, roomName = roomName }
            };
            SendRequest(requestMessage);
        }

        void IUserMessasing_NoReply.Whisper(UniversalChat.Interface.ChatItem chatItem)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserMessasing_PayloadTable.Whisper_Invoke { chatItem = chatItem }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region UniversalChat.Interface.IRoomObserver

namespace UniversalChat.Interface
{
    public static class IRoomObserver_PayloadTable
    {
        [ProtoContract, TypeAlias]
        public class Enter_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.String userId;

            public void Invoke(object target)
            {
                ((IRoomObserver)target).Enter(userId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Exit_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.String userId;

            public void Invoke(object target)
            {
                ((IRoomObserver)target).Exit(userId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Say_Invoke : IInvokable
        {
            [ProtoMember(1)] public UniversalChat.Interface.ChatItem chatItem;

            public void Invoke(object target)
            {
                ((IRoomObserver)target).Say(chatItem);
            }
        }
    }

    [ProtoContract, TypeAlias]
    public class RoomObserver : InterfacedObserver, IRoomObserver
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return Channel != null ? (ActorRefBase)(((ActorNotificationChannel)Channel).Actor) : null; }
            set { Channel = new ActorNotificationChannel(value); }
        }

        [ProtoMember(2)] private int _observerId
        {
            get { return ObserverId; }
            set { ObserverId = value; }
        }

        private RoomObserver()
            : base(null, 0)
        {
        }

        public RoomObserver(IActorRef target, int observerId)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public RoomObserver(INotificationChannel channel, int observerId)
            : base(channel, observerId)
        {
        }

        public void Enter(System.String userId)
        {
            var payload = new IRoomObserver_PayloadTable.Enter_Invoke { userId = userId };
            Notify(payload);
        }

        public void Exit(System.String userId)
        {
            var payload = new IRoomObserver_PayloadTable.Exit_Invoke { userId = userId };
            Notify(payload);
        }

        public void Say(UniversalChat.Interface.ChatItem chatItem)
        {
            var payload = new IRoomObserver_PayloadTable.Say_Invoke { chatItem = chatItem };
            Notify(payload);
        }
    }
}

#endregion

#region UniversalChat.Interface.IUserEventObserver

namespace UniversalChat.Interface
{
    public static class IUserEventObserver_PayloadTable
    {
        [ProtoContract, TypeAlias]
        public class Whisper_Invoke : IInvokable
        {
            [ProtoMember(1)] public UniversalChat.Interface.ChatItem chatItem;

            public void Invoke(object target)
            {
                ((IUserEventObserver)target).Whisper(chatItem);
            }
        }

        [ProtoContract, TypeAlias]
        public class Invite_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.String invitorUserId;
            [ProtoMember(2)] public System.String roomName;

            public void Invoke(object target)
            {
                ((IUserEventObserver)target).Invite(invitorUserId, roomName);
            }
        }
    }

    [ProtoContract, TypeAlias]
    public class UserEventObserver : InterfacedObserver, IUserEventObserver
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return Channel != null ? (ActorRefBase)(((ActorNotificationChannel)Channel).Actor) : null; }
            set { Channel = new ActorNotificationChannel(value); }
        }

        [ProtoMember(2)] private int _observerId
        {
            get { return ObserverId; }
            set { ObserverId = value; }
        }

        private UserEventObserver()
            : base(null, 0)
        {
        }

        public UserEventObserver(IActorRef target, int observerId)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public UserEventObserver(INotificationChannel channel, int observerId)
            : base(channel, observerId)
        {
        }

        public void Whisper(UniversalChat.Interface.ChatItem chatItem)
        {
            var payload = new IUserEventObserver_PayloadTable.Whisper_Invoke { chatItem = chatItem };
            Notify(payload);
        }

        public void Invite(System.String invitorUserId, System.String roomName)
        {
            var payload = new IUserEventObserver_PayloadTable.Invite_Invoke { invitorUserId = invitorUserId, roomName = roomName };
            Notify(payload);
        }
    }
}

#endregion
