// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

#region UnityBasic.Interface.ICalculator

namespace UnityBasic.Interface
{
    [PayloadTableForInterfacedActor(typeof(ICalculator))]
    public static class ICalculator_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Concat_Invoke), typeof(Concat_Return) },
                { typeof(Sum_Invoke), typeof(Sum_Return) },
                { typeof(Sum_2_Invoke), typeof(Sum_2_Return) },
            };
        }

        [ProtoContract, TypeAlias]
        public class Concat_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String a;
            [ProtoMember(2)] public System.String b;
            public Type GetInterfaceType() { return typeof(ICalculator); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await ((ICalculator)target).Concat(a, b);
                return (IValueGetable)(new Concat_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class Concat_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.String v;
            public Type GetInterfaceType() { return typeof(ICalculator); }
            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class Sum_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int32 a;
            [ProtoMember(2)] public System.Int32 b;
            public Type GetInterfaceType() { return typeof(ICalculator); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await ((ICalculator)target).Sum(a, b);
                return (IValueGetable)(new Sum_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class Sum_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Int32 v;
            public Type GetInterfaceType() { return typeof(ICalculator); }
            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class Sum_2_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Tuple<System.Int32, System.Int32> v;
            public Type GetInterfaceType() { return typeof(ICalculator); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await ((ICalculator)target).Sum(v);
                return (IValueGetable)(new Sum_2_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class Sum_2_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Int32 v;
            public Type GetInterfaceType() { return typeof(ICalculator); }
            public object Value { get { return v; } }
        }
    }

    public interface ICalculator_NoReply
    {
        void Concat(System.String a, System.String b);
        void Sum(System.Int32 a, System.Int32 b);
        void Sum(System.Tuple<System.Int32, System.Int32> v);
    }

    [ProtoContract, TypeAlias]
    public class CalculatorRef : InterfacedActorRef, ICalculator, ICalculator_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private CalculatorRef() : base(null)
        {
        }

        public CalculatorRef(IActorRef actor) : base(actor)
        {
        }

        public CalculatorRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public ICalculator_NoReply WithNoReply()
        {
            return this;
        }

        public CalculatorRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new CalculatorRef(Actor, requestWaiter, Timeout);
        }

        public CalculatorRef WithTimeout(TimeSpan? timeout)
        {
            return new CalculatorRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.String> Concat(System.String a, System.String b)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICalculator_PayloadTable.Concat_Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        public Task<System.Int32> Sum(System.Int32 a, System.Int32 b)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICalculator_PayloadTable.Sum_Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> Sum(System.Tuple<System.Int32, System.Int32> v)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICalculator_PayloadTable.Sum_2_Invoke { v = (System.Tuple<System.Int32, System.Int32>)v }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        void ICalculator_NoReply.Concat(System.String a, System.String b)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICalculator_PayloadTable.Concat_Invoke { a = a, b = b }
            };
            SendRequest(requestMessage);
        }

        void ICalculator_NoReply.Sum(System.Int32 a, System.Int32 b)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICalculator_PayloadTable.Sum_Invoke { a = a, b = b }
            };
            SendRequest(requestMessage);
        }

        void ICalculator_NoReply.Sum(System.Tuple<System.Int32, System.Int32> v)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICalculator_PayloadTable.Sum_2_Invoke { v = (System.Tuple<System.Int32, System.Int32>)v }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion
#region UnityBasic.Interface.ICounter

namespace UnityBasic.Interface
{
    [PayloadTableForInterfacedActor(typeof(ICounter))]
    public static class ICounter_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetCounter_Invoke), typeof(GetCounter_Return) },
                { typeof(IncCounter_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class GetCounter_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType() { return typeof(ICounter); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await ((ICounter)target).GetCounter();
                return (IValueGetable)(new GetCounter_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class GetCounter_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Int32 v;
            public Type GetInterfaceType() { return typeof(ICounter); }
            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class IncCounter_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int32 delta;
            public Type GetInterfaceType() { return typeof(ICounter); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((ICounter)target).IncCounter(delta);
                return null;
            }
        }
    }

    public interface ICounter_NoReply
    {
        void GetCounter();
        void IncCounter(System.Int32 delta);
    }

    [ProtoContract, TypeAlias]
    public class CounterRef : InterfacedActorRef, ICounter, ICounter_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private CounterRef() : base(null)
        {
        }

        public CounterRef(IActorRef actor) : base(actor)
        {
        }

        public CounterRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public ICounter_NoReply WithNoReply()
        {
            return this;
        }

        public CounterRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new CounterRef(Actor, requestWaiter, Timeout);
        }

        public CounterRef WithTimeout(TimeSpan? timeout)
        {
            return new CounterRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Int32> GetCounter()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICounter_PayloadTable.GetCounter_Invoke {  }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task IncCounter(System.Int32 delta)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICounter_PayloadTable.IncCounter_Invoke { delta = delta }
            };
            return SendRequestAndWait(requestMessage);
        }

        void ICounter_NoReply.GetCounter()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICounter_PayloadTable.GetCounter_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void ICounter_NoReply.IncCounter(System.Int32 delta)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICounter_PayloadTable.IncCounter_Invoke { delta = delta }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion
#region UnityBasic.Interface.IPedantic

namespace UnityBasic.Interface
{
    [PayloadTableForInterfacedActor(typeof(IPedantic))]
    public static class IPedantic_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(TestCall_Invoke), null },
                { typeof(TestOptional_Invoke), typeof(TestOptional_Return) },
                { typeof(TestParams_Invoke), typeof(TestParams_Return) },
                { typeof(TestPassClass_Invoke), typeof(TestPassClass_Return) },
                { typeof(TestReturnClass_Invoke), typeof(TestReturnClass_Return) },
                { typeof(TestTuple_Invoke), typeof(TestTuple_Return) },
            };
        }

        [ProtoContract, TypeAlias]
        public class TestCall_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType() { return typeof(IPedantic); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IPedantic)target).TestCall();
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class TestOptional_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Nullable<System.Int32> value;
            public Type GetInterfaceType() { return typeof(IPedantic); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await ((IPedantic)target).TestOptional(value);
                return (IValueGetable)(new TestOptional_Return { v = (System.Nullable<System.Int32>)__v });
            }
        }

        [ProtoContract, TypeAlias]
        public class TestOptional_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Nullable<System.Int32> v;
            public Type GetInterfaceType() { return typeof(IPedantic); }
            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class TestParams_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int32[] values;
            public Type GetInterfaceType() { return typeof(IPedantic); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await ((IPedantic)target).TestParams(values);
                return (IValueGetable)(new TestParams_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class TestParams_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Int32[] v;
            public Type GetInterfaceType() { return typeof(IPedantic); }
            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class TestPassClass_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public UnityBasic.Interface.TestParam param;
            public Type GetInterfaceType() { return typeof(IPedantic); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await ((IPedantic)target).TestPassClass(param);
                return (IValueGetable)(new TestPassClass_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class TestPassClass_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.String v;
            public Type GetInterfaceType() { return typeof(IPedantic); }
            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class TestReturnClass_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int32 value;
            [ProtoMember(2)] public System.Int32 offset;
            public Type GetInterfaceType() { return typeof(IPedantic); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await ((IPedantic)target).TestReturnClass(value, offset);
                return (IValueGetable)(new TestReturnClass_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class TestReturnClass_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public UnityBasic.Interface.TestResult v;
            public Type GetInterfaceType() { return typeof(IPedantic); }
            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class TestTuple_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Tuple<System.Int32, System.String> value;
            public Type GetInterfaceType() { return typeof(IPedantic); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await ((IPedantic)target).TestTuple(value);
                return (IValueGetable)(new TestTuple_Return { v = (System.Tuple<System.Int32, System.String>)__v });
            }
        }

        [ProtoContract, TypeAlias]
        public class TestTuple_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Tuple<System.Int32, System.String> v;
            public Type GetInterfaceType() { return typeof(IPedantic); }
            public object Value { get { return v; } }
        }
    }

    public interface IPedantic_NoReply
    {
        void TestCall();
        void TestOptional(System.Nullable<System.Int32> value);
        void TestParams(params System.Int32[] values);
        void TestPassClass(UnityBasic.Interface.TestParam param);
        void TestReturnClass(System.Int32 value, System.Int32 offset);
        void TestTuple(System.Tuple<System.Int32, System.String> value);
    }

    [ProtoContract, TypeAlias]
    public class PedanticRef : InterfacedActorRef, IPedantic, IPedantic_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private PedanticRef() : base(null)
        {
        }

        public PedanticRef(IActorRef actor) : base(actor)
        {
        }

        public PedanticRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IPedantic_NoReply WithNoReply()
        {
            return this;
        }

        public PedanticRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new PedanticRef(Actor, requestWaiter, Timeout);
        }

        public PedanticRef WithTimeout(TimeSpan? timeout)
        {
            return new PedanticRef(Actor, RequestWaiter, timeout);
        }

        public Task TestCall()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestCall_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Nullable<System.Int32>> TestOptional(System.Nullable<System.Int32> value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestOptional_Invoke { value = (System.Nullable<System.Int32>)value }
            };
            return SendRequestAndReceive<System.Nullable<System.Int32>>(requestMessage);
        }

        public Task<System.Int32[]> TestParams(params System.Int32[] values)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestParams_Invoke { values = values }
            };
            return SendRequestAndReceive<System.Int32[]>(requestMessage);
        }

        public Task<System.String> TestPassClass(UnityBasic.Interface.TestParam param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestPassClass_Invoke { param = param }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        public Task<UnityBasic.Interface.TestResult> TestReturnClass(System.Int32 value, System.Int32 offset)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestReturnClass_Invoke { value = value, offset = offset }
            };
            return SendRequestAndReceive<UnityBasic.Interface.TestResult>(requestMessage);
        }

        public Task<System.Tuple<System.Int32, System.String>> TestTuple(System.Tuple<System.Int32, System.String> value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestTuple_Invoke { value = (System.Tuple<System.Int32, System.String>)value }
            };
            return SendRequestAndReceive<System.Tuple<System.Int32, System.String>>(requestMessage);
        }

        void IPedantic_NoReply.TestCall()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestCall_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IPedantic_NoReply.TestOptional(System.Nullable<System.Int32> value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestOptional_Invoke { value = (System.Nullable<System.Int32>)value }
            };
            SendRequest(requestMessage);
        }

        void IPedantic_NoReply.TestParams(params System.Int32[] values)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestParams_Invoke { values = values }
            };
            SendRequest(requestMessage);
        }

        void IPedantic_NoReply.TestPassClass(UnityBasic.Interface.TestParam param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestPassClass_Invoke { param = param }
            };
            SendRequest(requestMessage);
        }

        void IPedantic_NoReply.TestReturnClass(System.Int32 value, System.Int32 offset)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestReturnClass_Invoke { value = value, offset = offset }
            };
            SendRequest(requestMessage);
        }

        void IPedantic_NoReply.TestTuple(System.Tuple<System.Int32, System.String> value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestTuple_Invoke { value = (System.Tuple<System.Int32, System.String>)value }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion
