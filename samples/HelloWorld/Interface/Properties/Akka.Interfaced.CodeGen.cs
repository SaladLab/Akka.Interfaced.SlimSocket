// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

#region HelloWorld.Interface.IEntry

namespace HelloWorld.Interface
{
    [PayloadTable(typeof(IEntry), PayloadTableKind.Request)]
    public static class IEntry_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetHelloWorld_Invoke), typeof(GetHelloWorld_Return) },
            };
        }

        [ProtoContract, TypeAlias]
        public class GetHelloWorld_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IEntry);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IEntry)__target).GetHelloWorld();
                return (IValueGetable)(new GetHelloWorld_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class GetHelloWorld_Return
            : IInterfacedPayload, IValueGetable, IPayloadActorRefUpdatable
        {
            [ProtoMember(1)] public HelloWorld.Interface.IHelloWorld v;

            public Type GetInterfaceType()
            {
                return typeof(IEntry);
            }

            public object Value
            {
                get { return v; }
            }

            void IPayloadActorRefUpdatable.Update(Action<object> updater)
            {
                if (v != null)
                {
                    updater(v); 
                }
            }
        }
    }

    public interface IEntry_NoReply
    {
        void GetHelloWorld();
    }

    public class EntryRef : InterfacedActorRef, IEntry, IEntry_NoReply
    {
        public EntryRef() : base(null)
        {
        }

        public EntryRef(IActorRef actor) : base(actor)
        {
        }

        public EntryRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IEntry_NoReply WithNoReply()
        {
            return this;
        }

        public EntryRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new EntryRef(Actor, requestWaiter, Timeout);
        }

        public EntryRef WithTimeout(TimeSpan? timeout)
        {
            return new EntryRef(Actor, RequestWaiter, timeout);
        }

        public Task<HelloWorld.Interface.IHelloWorld> GetHelloWorld()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IEntry_PayloadTable.GetHelloWorld_Invoke {  }
            };
            return SendRequestAndReceive<HelloWorld.Interface.IHelloWorld>(requestMessage);
        }

        void IEntry_NoReply.GetHelloWorld()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IEntry_PayloadTable.GetHelloWorld_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIEntry
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIEntry Convert(IEntry value)
        {
            if (value == null) return null;
            return new SurrogateForIEntry { Actor = ((EntryRef)value).Actor };
        }

        [ProtoConverter]
        public static IEntry Convert(SurrogateForIEntry value)
        {
            if (value == null) return null;
            return new EntryRef(value.Actor);
        }
    }
}

#endregion
#region HelloWorld.Interface.IHelloWorld

namespace HelloWorld.Interface
{
    [PayloadTable(typeof(IHelloWorld), PayloadTableKind.Request)]
    public static class IHelloWorld_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(AddObserver_Invoke), null },
                { typeof(GetHelloCount_Invoke), typeof(GetHelloCount_Return) },
                { typeof(SayHello_Invoke), typeof(SayHello_Return) },
            };
        }

        [ProtoContract, TypeAlias]
        public class AddObserver_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public HelloWorld.Interface.IHelloWorldEventObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IHelloWorld);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IHelloWorld)__target).AddObserver(observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class GetHelloCount_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IHelloWorld);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IHelloWorld)__target).GetHelloCount();
                return (IValueGetable)(new GetHelloCount_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class GetHelloCount_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Int32 v;

            public Type GetInterfaceType()
            {
                return typeof(IHelloWorld);
            }

            public object Value
            {
                get { return v; }
            }
        }

        [ProtoContract, TypeAlias]
        public class SayHello_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String name;

            public Type GetInterfaceType()
            {
                return typeof(IHelloWorld);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IHelloWorld)__target).SayHello(name);
                return (IValueGetable)(new SayHello_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class SayHello_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.String v;

            public Type GetInterfaceType()
            {
                return typeof(IHelloWorld);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IHelloWorld_NoReply
    {
        void AddObserver(HelloWorld.Interface.IHelloWorldEventObserver observer);
        void GetHelloCount();
        void SayHello(System.String name);
    }

    public class HelloWorldRef : InterfacedActorRef, IHelloWorld, IHelloWorld_NoReply
    {
        public HelloWorldRef() : base(null)
        {
        }

        public HelloWorldRef(IActorRef actor) : base(actor)
        {
        }

        public HelloWorldRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IHelloWorld_NoReply WithNoReply()
        {
            return this;
        }

        public HelloWorldRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new HelloWorldRef(Actor, requestWaiter, Timeout);
        }

        public HelloWorldRef WithTimeout(TimeSpan? timeout)
        {
            return new HelloWorldRef(Actor, RequestWaiter, timeout);
        }

        public Task AddObserver(HelloWorld.Interface.IHelloWorldEventObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IHelloWorld_PayloadTable.AddObserver_Invoke { observer = observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Int32> GetHelloCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IHelloWorld_PayloadTable.GetHelloCount_Invoke {  }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.String> SayHello(System.String name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IHelloWorld_PayloadTable.SayHello_Invoke { name = name }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        void IHelloWorld_NoReply.AddObserver(HelloWorld.Interface.IHelloWorldEventObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IHelloWorld_PayloadTable.AddObserver_Invoke { observer = observer }
            };
            SendRequest(requestMessage);
        }

        void IHelloWorld_NoReply.GetHelloCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IHelloWorld_PayloadTable.GetHelloCount_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IHelloWorld_NoReply.SayHello(System.String name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IHelloWorld_PayloadTable.SayHello_Invoke { name = name }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIHelloWorld
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIHelloWorld Convert(IHelloWorld value)
        {
            if (value == null) return null;
            return new SurrogateForIHelloWorld { Actor = ((HelloWorldRef)value).Actor };
        }

        [ProtoConverter]
        public static IHelloWorld Convert(SurrogateForIHelloWorld value)
        {
            if (value == null) return null;
            return new HelloWorldRef(value.Actor);
        }
    }
}

#endregion
#region HelloWorld.Interface.IHelloWorldEventObserver

namespace HelloWorld.Interface
{
    [PayloadTable(typeof(IHelloWorldEventObserver), PayloadTableKind.Notification)]
    public static class IHelloWorldEventObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(SayHello_Invoke),
            };
        }

        [ProtoContract, TypeAlias]
        public class SayHello_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.String name;

            public Type GetInterfaceType()
            {
                return typeof(IHelloWorldEventObserver);
            }

            public void Invoke(object __target)
            {
                ((IHelloWorldEventObserver)__target).SayHello(name);
            }
        }
    }

    public class HelloWorldEventObserver : InterfacedObserver, IHelloWorldEventObserver
    {
        public HelloWorldEventObserver()
            : base(null, 0)
        {
        }

        public HelloWorldEventObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public HelloWorldEventObserver(IActorRef target, int observerId = 0)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public void SayHello(System.String name)
        {
            var payload = new IHelloWorldEventObserver_PayloadTable.SayHello_Invoke { name = name };
            Notify(payload);
        }
    }

    [ProtoContract]
    public class SurrogateForIHelloWorldEventObserver
    {
        [ProtoMember(1)] public INotificationChannel Channel;
        [ProtoMember(2)] public int ObserverId;

        [ProtoConverter]
        public static SurrogateForIHelloWorldEventObserver Convert(IHelloWorldEventObserver value)
        {
            if (value == null) return null;
            var o = (HelloWorldEventObserver)value;
            return new SurrogateForIHelloWorldEventObserver { Channel = o.Channel, ObserverId = o.ObserverId };
        }

        [ProtoConverter]
        public static IHelloWorldEventObserver Convert(SurrogateForIHelloWorldEventObserver value)
        {
            if (value == null) return null;
            return new HelloWorldEventObserver(value.Channel, value.ObserverId);
        }
    }
}

#endregion
