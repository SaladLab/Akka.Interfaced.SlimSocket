// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;

#region Akka.Interfaced.SlimSocket.Server.IGateway

namespace Akka.Interfaced.SlimSocket.Server
{
    [PayloadTable(typeof(IGateway), PayloadTableKind.Request)]
    public static class IGateway_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Start_Invoke), null },
                { typeof(Stop_Invoke), null },
            };
        }

        public class Start_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGateway);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGateway)__target).Start();
                return null;
            }
        }

        public class Stop_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGateway);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGateway)__target).Stop();
                return null;
            }
        }
    }

    public interface IGateway_NoReply
    {
        void Start();
        void Stop();
    }

    public class GatewayRef : InterfacedActorRef, IGateway, IGateway_NoReply
    {
        public GatewayRef() : base(null)
        {
        }

        public GatewayRef(IRequestTarget target) : base(target)
        {
        }

        public GatewayRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public GatewayRef(IActorRef actor) : base(new AkkaActorTarget(actor))
        {
        }

        public GatewayRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(new AkkaActorTarget(actor), requestWaiter, timeout)
        {
        }

        public IActorRef Actor => ((AkkaActorTarget)Target)?.Actor;

        public IGateway_NoReply WithNoReply()
        {
            return this;
        }

        public GatewayRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GatewayRef(Target, requestWaiter, Timeout);
        }

        public GatewayRef WithTimeout(TimeSpan? timeout)
        {
            return new GatewayRef(Target, RequestWaiter, timeout);
        }

        public Task Start()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGateway_PayloadTable.Start_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Stop()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGateway_PayloadTable.Stop_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGateway_NoReply.Start()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGateway_PayloadTable.Start_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGateway_NoReply.Stop()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGateway_PayloadTable.Stop_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IGateway))]
    public interface IGatewaySync : IInterfacedActorSync
    {
        void Start();
        void Stop();
    }
}

#endregion
